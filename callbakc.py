from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
from config import bot2

keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

bot = Bot(token=bot2, parse_mode='HTML')
dp = Dispatcher(bot)

def get_doll():
    url = 'https://www.cbr-xml-daily.ru/daily_json.js'
    response_1 = requests.get(url)
    data = response_1.json()
    return data['Valute']['USD']['Value']
def get_doll_previous():
    url = 'https://www.cbr-xml-daily.ru/daily_json.js'
    response_1 = requests.get(url)
    data = response_1.json()
    return data['Valute']['USD']['Previous']
def get_euro():
    url = 'https://www.cbr-xml-daily.ru/daily_json.js'
    response_1 = requests.get(url)
    data = response_1.json()
    return data['Valute']['EUR']['Value']
def get_euro_previous():
    url = 'https://www.cbr-xml-daily.ru/daily_json.js'
    response_1 = requests.get(url)
    data = response_1.json()
    return data['Valute']['EUR']['Previous']
def get_yun():
    url = 'https://www.cbr-xml-daily.ru/daily_json.js'
    response_1 = requests.get(url)
    data = response_1.json()
    return data['Valute']['CNY']['Value']
def get_yun_previous():
    url = 'https://www.cbr-xml-daily.ru/daily_json.js'
    response_1 = requests.get(url)
    data = response_1.json()
    return data['Valute']['CNY']['Previous']
def get_funt():
    url = 'https://www.cbr-xml-daily.ru/daily_json.js'
    response_1 = requests.get(url)
    data = response_1.json()
    return data['Valute']['GBP']['Value']
def get_funt_previous():
    url = 'https://www.cbr-xml-daily.ru/daily_json.js'
    response_1 = requests.get(url)
    data = response_1.json()
    return data['Valute']['GBP']['Previous']

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer('üëã\n'
                         '<b>–ü—Ä–∏–≤–µ—Ç ! –Ø NewCourse = –í–∞—à –ª—É—á—à–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä –Ω–∞ –±–∏—Ä–∂–µ !</b>\n'
                         '<b>–î–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É</b> /menu')

@dp.message_handler(commands=['menu'])
async def cmd_random(message: types.Message):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text='–ö—É—Ä—Å—ã –í–∞–ª—é—Ç', callback_data="course"))
    await message.answer(text="üß†\n"
                         "<b>–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:</b>",reply_markup=kb)

@dp.callback_query_handler()
async def cll1(call1: types.CallbackQuery):
    if call1.data == 'course':
        kb2 = types.InlineKeyboardMarkup()
        kb2.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_course'))
        kb2.add(types.InlineKeyboardButton(text='üíµ –î–æ–ª–ª–∞—Ä/–†—É–±–ª—å', callback_data='RUB/DOL'))
        kb2.add(types.InlineKeyboardButton(text='üí∂ –ï–≤—Ä–æ/–†—É–±–ª—å', callback_data='EUR/RUB'))
        kb2.add(types.InlineKeyboardButton(text='üí¥ –Æ–∞–Ω—å/–†—É–±–ª—å', callback_data='yun'))
        kb2.add(types.InlineKeyboardButton(text='üí∑ –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤/–†—É–±–ª—å', callback_data='fnt'))
        await bot.edit_message_text(chat_id=call1.from_user.id, message_id=call1.message.message_id, text='üìä\n'
                                                                                                          '<b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ [–ï–¥–∏–Ω–∏—Ü–∞ –í–∞–ª—é—Ç—ã]/–†—É–±–ª—å:</b>', reply_markup=kb2)
    elif call1.data == 'back_course':
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(text='–ö—É—Ä—Å—ã –í–∞–ª—é—Ç', callback_data="course"))
        await bot.edit_message_text(chat_id=call1.from_user.id, message_id=call1.message.message_id, text="üß†\n"
                         "<b>–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:</b>",reply_markup=kb) #–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    elif call1.data == 'RUB/DOL':
        kbdoll = types.InlineKeyboardMarkup()
        kbdoll.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_course'))
        rd = get_doll()
        rd_p = get_doll_previous()
        await bot.edit_message_text(chat_id=call1.from_user.id, message_id=call1.message.message_id, text=f'üíµ\n'
                                                                                                          f'<b>1 –î–æ–ª–ª–∞—Ä —Å—Ç–æ–∏—Ç {rd} –†—É–±–ª–µ–π –ø–æ –¶–ë</b>\n'
                                                                                                          f'\n'
                                                                                                          f'<b>üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ</b>\n'
                                                                                                          f'<b>(–ü–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ –≤—á–µ—Ä–∞—à–Ω–∏–º –¥–Ω—ë–º):</b>\n'
                                                                                                          f'{rd-rd_p} <b>–†—É–±–ª–µ–π</b>', reply_markup=kbdoll)
    elif call1.data == 'EUR/RUB':
        kbeur = types.InlineKeyboardMarkup()
        kbeur.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_course'))
        er = get_euro()
        er_p = get_euro_previous()
        await bot.edit_message_text(chat_id=call1.from_user.id, message_id=call1.message.message_id, text=f'üí∂\n'
                                                                                                          f'<b>1 –ï–≤—Ä–æ —Å—Ç–æ–∏—Ç {er} –†—É–±–ª–µ–π –ø–æ –¶–ë</b>\n'
                                                                                                          f'\n'
                                                                                                          f'<b>üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ</b>\n'
                                                                                                          f'<b>(–ü–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ –≤—á–µ—Ä–∞—à–Ω–∏–º –¥–Ω—ë–º):</b>\n'
                                                                                                          f'{er-er_p} <b>–†—É–±–ª–µ–π</b>', reply_markup=kbeur)
    elif call1.data == 'yun':
        kbyun = types.InlineKeyboardMarkup()
        kbyun.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_course'))
        yr = get_yun()
        yr_p = get_yun_previous()
        await bot.edit_message_text(chat_id=call1.from_user.id, message_id=call1.message.message_id, text=f'üí¥\n'
                                                                                                          f'<b>1 –Æ–∞–Ω—å —Å—Ç–æ–∏—Ç {yr} –†—É–±–ª–µ–π –ø–æ –¶–ë</b>\n'
                                                                                                          f'\n'
                                                                                                          f'<b>üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ</b>\n'
                                                                                                          f'<b>(–ü–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ –≤—á–µ—Ä–∞—à–Ω–∏–º –¥–Ω—ë–º):</b>\n'
                                                                                                          f'{yr-yr_p} <b>–†—É–±–ª–µ–π</b>', reply_markup=kbyun)
    elif call1.data == 'fnt':
        kbfnt = types.InlineKeyboardMarkup()
        kbfnt.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_course'))
        fr = get_funt()
        fr_p = get_funt_previous()
        await bot.edit_message_text(chat_id=call1.from_user.id, message_id=call1.message.message_id, text=f'üí∑\n'
                                                                                                          f'<b>1 –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤ —Å—Ç–æ–∏—Ç {fr} –†—É–±–ª–µ–π –ø–æ –¶–ë</b>\n'
                                                                                                          f'\n'
                                                                                                          f'<b>üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ</b>\n'
                                                                                                          f'<b>(–ü–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ –≤—á–µ—Ä–∞—à–Ω–∏–º –¥–Ω—ë–º):</b>\n'
                                                                                                          f'{fr-fr_p} <b>–†—É–±–ª–µ–π</b>', reply_markup=kbfnt)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
